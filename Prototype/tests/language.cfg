````
File Formating:
` -> non-terminal
`` -> ###
``` -> token definition
```` -> comment
````` -> data_declaration

Below is the small-c CFG. Interpreter creation is divided into
three steps: Tokenizer, Parser, Evaluator

1. Tokenizer:
program traverses the entire file and searches for tokens (explicitly defined and implied).
Once all tokens are discovered, the tokenizer creates a tokenizer from the skeleton c-based
tokenizer. This outputs a linked list of tokens which can be then parsed by the Parser. tokens
are stored in a structure contaning the token type, value, and a pointer to the next token.
type is an integer which correspondes to the regular expression index in the token_types array
value correpsonds to the literal string which is captured in the token. Note the tokenizer requires 
pre-escaped tokens (as escaped in cfg declaration).

2. Parser:
program traverses the cfg and creates a parse_term function for each non-terminal. the parse_term function
creates an abstract syntax tree by parsing the tokens. the AST is constructed with a node structure which
contains a name (representing the type of instruction), a list of tokens (can be empty for some non-terminals,
think declare vs assign), a number of children nodes, and a list of children nodes.
The parser declaration relies on the assumption of a recursive decent enabled cfg. this can be enforced
in the front-end. this means that terminals will not be repeated as deciding factors between options.

Assumption summary:
- any terminal in the cfg is non-ambiguous 
    + ab | bb not ba | bb
- any non-terminal before a defining terminal will be present among all expression options
    + `expr` -> `wow` a | `wow` b
    + `expr` -> `wow `bow` a | `wow` `bow` b

3. Evaluator:
We will ask the user to define what a "data" is for more user control, and we will use this definition to
structure the hashmap.
````


```` TOKEN TYPES ````

```float``` -> ^[0-9]+\\.[0-9]*$
```integer``` -> [0-9]+
```bool``` -> true|false
```char``` -> '.'
```variable``` -> [a-zA-Z]+
```function``` -> [a-zA-Z]+

```` OPERATORS ````

`EQOPERATOR` -> == | !=
`REOPERATOR` -> < | > | <= | >=
`ADOPERATOR` -> \\+ | -
`MULOPERATOR` -> \\* | /
`UNOPERATOR` -> ! | &

``EQOPERATOR`` -> {
    // 0: !=, 1: ==
    int *v1 = (int*)malloc(1 * sizeof(int));
    char **v2 = NULL;
    Data *v3 = (Data*)malloc(1 * sizeof(Data));
    Eval v4;
    v3->data = v1;
    v3->type = -1;
    v4.environment = env;
    v4.result = v3;

    if(!strcmp(n->tokens[0], "==")) {
        *v1 = 1;
    } else {
        *v1 = 0;
    }

    return v4;
}

``REOPERATOR`` -> {
    // 0: <, 1: > 2: <= 3: >=
    int *v1 = (int*)malloc(1 * sizeof(int));
    char **v2 = NULL;
    Data *v3 = (Data*)malloc(1 * sizeof(Data));
    Eval v4;
    v3->data = v1;
    v3->type = -1;
    v4.environment = env;
    v4.result = v3;

    if(!strcmp(n->tokens[0], "<")) {
        *v1 = 0;
    } else if(!strcmp(n->tokens[0], ">")) {
        *v1 = 1;
    } else if(!strcmp(n->tokens[0], "<=")) {
        *v1 = 2;
    } else if(!strcmp(n->tokens[0], ">=")) {
        *v1 = 3;
    }

    return v4;
}

``ADOPERATOR`` -> {
    // 0: -, 1: +
    int *v1 = (int*)malloc(1 * sizeof(int));
    char **v2 = NULL;
    Data *v3 = (Data*)malloc(1 * sizeof(Data));
    Eval v4;
    v3->data = v1;
    v3->type = -1;
    v4.environment = env;
    v4.result = v3;

    if(!strcmp(n->tokens[0], "+")) {
        *v1 = 1;
    } else {
        *v1 = 0;
    }

    return v4;
}

``MULOPERATOR`` -> {
    // 0: /, 1: *
    int *v1 = (int*)malloc(1 * sizeof(int));
    char **v2 = NULL;
    Data *v3 = (Data*)malloc(1 * sizeof(Data));
    Eval v4;
    v3->data = v1;
    v3->type = -1;
    v4.environment = env;
    v4.result = v3;

    if(!strcmp(n->tokens[0], "*")) {
        *v1 = 1;
    } else {
        *v1 = 0;
    }

    return v4;
}

``UNOPERATOR`` -> {
    // 1: & 2: !
    int *v1 = (int*)malloc(1 * sizeof(int));
    char **v2 = NULL;
    Data *v3 = (Data*)malloc(1 * sizeof(Data));
    Eval v4;
    v3->data = v1;
    v3->type = -1;
    v4.environment = env;
    v4.result = v3;

    if(!strcmp(n->tokens[0], "&")) {
        *v1 = 1;
    } else if(!strcmp(n->tokens[0], "!")) {
        *v1 = 2;
    }

    return v4;
}

```` EXPRESSIONS ````

`Expr` -> `OrExpr`
`OrExpr` -> `AndExpr` \\|\\| `OrExpr` | `AndExpr`
`AndExpr` -> `EqualityExpr` && `AndExpr` | `EqualityExpr`
`EqualityExpr` -> `RelationalExpr` `EQOPERATOR` `EqualityExpr` | `RelationalExpr`
`RelationalExpr` -> `AdditiveExpr` `REOPERATOR` `RelationalExpr` | `AdditiveExpr`
`AdditiveExpr` -> `MultiplicativeExpr` `ADOPERATOR` `AdditiveExpr` | `MultiplicativeExpr`
`MultiplicativeExpr` -> `PowerExpr` `MULOPERATOR` `MultiplicativeExpr` | `PowerExpr`
`PowerExpr` -> `UnaryExpr` \\^ `PowerExpr` | `UnaryExpr`
`UnaryExpr` -> `UNOPERATOR` `UnaryExpr` | `PrimaryExpr`
`PrimaryExpr` -> ```integer``` | ```bool``` | ```float``` | ```char``` | ```variable``` | call ```function``` \\( `ArgsCall` \\) | \\( `Expr` \\)
`ArgsCall` -> `Expr` , `ArgsCall` | `Expr` \\.

``Expr`` -> {
    return evaluate_help(n->next[0], env);
}

``ArgsCall`` -> {
    if(n->n_next == 1) {
        Data *r = (Data*)malloc(1 * sizeof(Data));
        Data **sr = (Data**)malloc(1 * sizeof(Data*));
        sr[0] = evaluate_help(n->next[0], env).result;
        r->data = sr;
        r->n_args = 1;

        Eval e;
        e.environment = env;
        e.result = r;
        return e;
    } else {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[1], env).result;
        Data **sr = (Data**)malloc((r2->n_args + 1) * sizeof(Data*));
        int i;
        sr[0] = r1;
        Data **a = r2->data;
        for(i = 0; i < r2->n_args; i++) {
            sr[i + 1] = a[i];
        }
        d->data = sr;
        d->n_args = r2->n_args + 1;

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    }
}

``PrimaryExpr`` -> {
    if(n->n_next == 1) {
        if(!strcmp(n->tokens[0], "(")) {
            return evaluate_help(n->next[0], env);
        } else {
            HashMap *h;
            h = init(h);
            Data *function_casing = get_hashmap(n->tokens[1], env);
            Data *args = evaluate_help(n->next[0], env).result;
            if(args->n_args != function_casing->n_args) {
                printf("Function arguments are invalid.\n");
                exit(0);
            }
            int i;
            Data **a_input = (Data**)args->data;
            for(i = 0; i < function_casing->n_args; i++) {
                set_hashmap(function_casing->arg_names[i], a_input[i], h);
            }

            Data *l = evaluate_help(function_casing->data, h).result;
            if(l->type != function_casing->type) {
                printf("Return type invalid.\n");
                exit(0);
            }

            Eval e;
            e.result = l;
            e.environment = env;
            return e;
        }
    } else {
        char *v = n->tokens[0];
        Data *d = (Data*)malloc(1 * sizeof(Data));
        if(match(v, "^[0-9]+$")) {
            int *r = (int*)malloc(1 * sizeof(int));
            *r = atoi(v);
            d->data = r;
            d->type = 0;
        } else if(match(v, "^true|false$")) {
            int *r = (int*)malloc(1 * sizeof(int));
            if(!strcmp(v, "true")) {
                *r = 1;
            } else {
                *r = 0;
            }
            d->data = r;
            d->type = 1;
        } else if(match(v, "^[0-9]+\\.[0-9]*$")) {
            float *r = (float*)malloc(1 * sizeof(float));
            *r = atof(v);
            d->data = r;
            d->type = 2;
        } else if(match(v, "^'.'$")) {
            char *r = (char*)malloc(1 * sizeof(char));
            *r = v[1];
            d->data = r;
            d->type = 3;
        } else {
            d = get_hashmap(v, env);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    }
}

``UnaryExpr`` -> {
    if(n->n_next == 2) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        int *op = evaluate_help(n->next[0], env).result->data;
        int *r = evaluate_help(n->next[1], env).result->data;
        int *v = (int*)malloc(1 * sizeof(int));
        if(*op == 1) {
            *v = &r;
            d->data = v;
            d->type = 4;
        } else {
            if(*r) {
                *v = 0;
            } else {
                *v = 1;
            }
            d->data = v;
            d->type = 1;
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``PowerExpr`` -> {
    if(n->n_next == 2) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[1], env).result;

        if(r1->type == 0 && r2->type == 0) {
            int *a = r1->data;
            int *b = r2->data;
            int i = 0;
            int *v = (int*)malloc(1 * sizeof(int));
            *v = 1;
            for(i = 0; i < *b; i++) {
                *v *= *a;
            }
            d->data = v;
            d->type = 0;
        } else {
            printf("Execute Error: Power expression only takes integers.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``MultiplicativeExpr`` -> {
    if(n->n_next == 3) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[2], env).result;
        int *op = evaluate_help(n->next[1], env).result->data;

        if(r1->type == 0 && r2->type == 0) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op) {
                *v = (*a) * (*b);
            } else {
                *v = (*a) / (*b);
            }
            d->data = v;
            d->type = 0;
        } else if(r1->type == 2 && r2->type == 2) {
            float *a = r1->data;
            float *b = r2->data;
            float *v = (float*)malloc(1 * sizeof(float));
            if(*op) {
                *v = (*a) * (*b);
            } else {
                *v = (*a) / (*b);
            }
            d->data = v;
            d->type = 2;
        } else {
            printf("Execute Error: Multiplicative expression only takes integers and floats.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``AdditiveExpr`` -> {
    if(n->n_next == 3) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[2], env).result;
        int *op = evaluate_help(n->next[1], env).result->data;

        if(r1->type == 0 && r2->type == 0) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op) {
                *v = (*a) + (*b);
            } else {
                *v = (*a) - (*b);
            }
            d->data = v;
            d->type = 0;
        } else if(r1->type == 2 && r2->type == 2) {
            float *a = r1->data;
            float *b = r2->data;
            float *v = (float*)malloc(1 * sizeof(float));
            if(*op) {
                *v = (*a) + (*b);
            } else {
                *v = (*a) - (*b);
            }
            d->data = v;
            d->type = 2;
        } else {
            printf("Execute Error: Additive expression only takes integers and floats.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``RelationalExpr`` -> {
    if(n->n_next == 3) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[2], env).result;
        int *op = evaluate_help(n->next[1], env).result->data;

        if(r1->type == 0 && r2->type == 0) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op == 0) {
                *v = (*a) < (*b);
            } else if(*op == 1) {
                *v = (*a) > (*b);
            } else if(*op == 2) {
                *v = (*a) <= (*b);
            } else {
                *v = (*a) >= (*b);
            }
            d->data = v;
            d->type = 1;
        } else if(r1->type == 2 && r2->type == 2) {
            float *a = r1->data;
            float *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            
            if(*op == 0) {
                *v = (*a) < (*b);
            } else if(*op == 1) {
                *v = (*a) > (*b);
            } else if(*op == 2) {
                *v = (*a) <= (*b);
            } else {
                *v = (*a) >= (*b);
            }
            d->data = v;
            d->type = 1;
        } else if(r1->type == 3 && r2->type == 3) {
            char *a = r1->data;
            char *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            
            if(*op == 0) {
                *v = (*a) < (*b);
            } else if(*op == 1) {
                *v = (*a) > (*b);
            } else if(*op == 2) {
                *v = (*a) <= (*b);
            } else {
                *v = (*a) >= (*b);
            }
            d->data = v;
            d->type = 1;
        } else {
            printf("Execute Error: Relational expression only takes integers, floats, and characters.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``EqualityExpr`` -> {
    if(n->n_next == 3) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[2], env).result;
        int *op = evaluate_help(n->next[1], env).result->data;

        if(r1->type == 0 && r2->type == 0) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op == 1) {
                *v = (*a) == (*b);
            } else {
                *v = (*a) != (*b);
            }
            d->data = v;
            d->type = 1;
        } else if(r1->type == 2 && r2->type == 2) {
            float *a = r1->data;
            float *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op == 1) {
                *v = (*a) == (*b);
            } else {
                *v = (*a) != (*b);
            }
            d->data = v;
            d->type = 1;
        } else if(r1->type == 3 && r2->type == 3) {
            char *a = r1->data;
            char *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op == 1) {
                *v = (*a) == (*b);
            } else {
                *v = (*a) != (*b);
            }
            d->data = v;
            d->type = 1;
        } else if(r1->type == 1 && r2->type == 1) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            if(*op == 1) {
                *v = (*a) == (*b);
            } else {
                *v = (*a) != (*b);
            }
            d->data = v;
            d->type = 1;
        } else {
            printf("Execute Error: Equality Expr only takes integer, float, bool, and char.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``AndExpr`` -> {
    if(n->n_next == 2) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[1], env).result;

        if(r1->type == 1 && r2->type == 1) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            *v = (*a) && (*b);
            d->data = v;
            d->type = 1;
        } else {
            printf("Execute Error: AndExpr only takes booleans.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``OrExpr`` -> {
    if(n->n_next == 2) {
        Data *d = (Data*)malloc(1 * sizeof(Data));
        Data *r1 = evaluate_help(n->next[0], env).result;
        Data *r2 = evaluate_help(n->next[1], env).result;

        if(r1->type == 1 && r2->type == 1) {
            int *a = r1->data;
            int *b = r2->data;
            int *v = (int*)malloc(1 * sizeof(int));
            *v = (*a) || (*b);
            d->data = v;
            d->type = 1;
        } else {
            printf("Execute Error: OrExpr only takes booleans.\n");
            exit(0);
        }

        Eval e;
        e.environment = env;
        e.result = d;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

```` STATEMENTS ````

`Type` -> int | bool | float | char

``Type`` -> {
    Data *d = (Data*)malloc(1 * sizeof(Data));
    d->data = NULL;
    if(!strcmp(n->tokens[0], "int")) {
        d->type = 0;
    } else if(!strcmp(n->tokens[0], "bool")) {
        d->type = 1;
    } else if(!strcmp(n->tokens[0], "float")) {
        d->type = 2;
    } else {
        d->type = 3;
    }

    Eval e;
    e.environment = env;
    e.result = d;
    return e;
}

`!` -> Super
`Stmt` -> `StmtOptions` `Stmt` | `StmtOptions`
`StmtOptions` -> `DeclareStmt` | `AssignStmt` | `PrintStmt` | `IfStmt` | `WhileStmt` | `ReturnStmt`
`DeclareStmt` -> `Type` ```variable``` ;
`AssignStmt` -> ```variable``` = `Expr` ;
`PrintStmt` -> printf \\( `Expr` \\) ;
`IfStmt` -> if \\( `Expr` \\) \\{ `Stmt` \\} `ElseBranch`
`ElseBranch` -> else \\{ `Stmt` \\} | ;
`WhileStmt` -> while \\( `Expr` \\) \\{ `Stmt` \\} ;
`ReturnStmt` -> return `Expr` ;

```` SUPER ````

`Super` -> `SuperOptions` `Super` | `SuperOptions` END
`SuperOptions` -> `Function` | `Stmt`
`Function` -> FUNCT `Type` ```function``` \\( `Args` \\) \\{ `Stmt` \\}
`Args` -> `Arg` , `Args` | `Arg`
`Arg` -> `Type` ```variable```

``ReturnStmt`` -> {
    return evaluate_help(n->next[0], env);
}

``Super`` -> {
    Eval r = evaluate_help(n->next[0], env);
    if(n->n_next == 2) {
        return evaluate_help(n->next[1], r.environment);
    }

    return r;
}

``SuperOptions`` -> {
    return evaluate_help(n->next[0], env);
}

``Function`` -> {
    // We have 2 important trees
    Data *d = (Data*)malloc(1 * sizeof(Data));
    HashMap  *h;
    h = init(h);
    // get the args
    evaluate_help(n->next[1], h);
    // h has args
    int len;
    char **names;
    Data **lst = get_all_hashmap(h, &len, &names);
    d->arg_names = names;
    d->n_args = len;
    d->args = lst;
    d->data = n->next[2];
    d->type = evaluate_help(n->next[0], env).result->type;
    set_hashmap(n->tokens[1], d, env);
    Eval e;
    e.environment = env;
    e.result = NULL;
    return e;
}

``Args`` -> {
    Eval r = evaluate_help(n->next[0], env);
    if(n->n_next == 2) {
        return evaluate_help(n->next[1], r.environment);
    }

    return r;
}

``Arg`` -> {
    Eval r = evaluate_help(n->next[0], env);
    Data *d = (Data*)malloc(1 * sizeof(Data));
    d->type = r.result->type;
    d->data = NULL;

    set_hashmap(n->tokens[0], d, env);

    Eval e;
    e.environment = env;
    e.result = d;
    return e;
}

``Stmt`` -> {
    Eval r = evaluate_help(n->next[0], env);
    if(n->n_next == 2) {
        return evaluate_help(n->next[1], r.environment);
    }

    return r;
}

``StmtOptions`` -> {
    return evaluate_help(n->next[0], env);
}

``DeclareStmt`` -> {
    Eval r = evaluate_help(n->next[0], env);
    Data *d = (Data*)malloc(1 * sizeof(Data));
    d->type = r.result->type;
    d->data = NULL;

    set_hashmap(n->tokens[0], d, env);

    Eval e;
    e.environment = env;
    e.result = d;
    return e;
}

``AssignStmt`` -> {
    Eval r = evaluate_help(n->next[0], env);
    set_hashmap(n->tokens[0], r.result, env);
    Eval e;
    e.result = NULL;
    e.environment = env;
    return e;
}

``PrintStmt`` -> {
    Eval r = evaluate_help(n->next[0], env);
    if(r.result->type == 0) {
        int *p = r.result->data;
        printf("%d\n", *p);
    } else if(r.result->type == 1) {
        int *p = r.result->data;
        printf("%d\n", *p);
    } else if(r.result->type == 2) {
        float *p = r.result->data;
        printf("%f\n", *p);
    } else {
        char *p = r.result->data;
        printf("%c\n", *p);
    }

    Eval e;
    e.result = NULL;
    e.environment = env;
    return e;
}

``IfStmt`` -> {
    Eval r = evaluate_help(n->next[0], env);
    int *d = r.result->data;
    if(*d) {
        return evaluate_help(n->next[1], env);
    } else {
        return evaluate_help(n->next[2], env);
    }
}

``ElseBranch`` -> {
    if(n->n_next == 0) {
        Eval e;
        e.result = NULL;
        e.environment = env;
        return e;
    } else {
        return evaluate_help(n->next[0], env);
    }
}

``WhileStmt`` -> {
    Eval r = evaluate_help(n->next[0], env);
    int *d = r.result->data;
    while(*d) {
        Eval e = evaluate_help(n->next[1], env);
        env = e.environment;
        r = evaluate_help(n->next[0], env);
        d = r.result->data;
    }

    Eval e;
    e.result = NULL;
    e.environment = env;
    return e;
}

`````
void *data;
int type;
struct Data **args;
int n_args;
char **arg_names;
`````